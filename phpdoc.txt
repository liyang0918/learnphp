
PHP代码都是包含在 PHP标记中，如
<?php
	...
?>

一、PHP基础
	1、php标记风格
	xml风格
	<?php
		echo "hello"
	?>
	
	脚本风格
	<script language="php">
		echo 'script'
	</script>
	
	简短风格
	<? echo 'short' ?>

	ASP风格
	<%
		echo 'ASP'
	%>
	
	简短风格、ASP风格需要在php.ini中设置相关字段为on
	
	2、php注释
	c、c++、shell三种注释风格
	/**/、//、#
	
	3、php数据类型
	标量数据类型
	-- boolean 布尔类型
		true、false
	-- string 字符串
		单引号包含的变量按普通字符处理
		双引号包含的变量会被替换成实际数值
		<<<std 符号定义 std 未字符串定界符，遇到顶格写的、孤立的 std 认为字符串结束
	-- integer 整型
	-- float 浮点型
		浮点类型 float和double完全一样
		
	复合数据类型
	-- array 数组
		三种定义方式: $arr = array(...)
		$arr = array('value1', 'value2'...)
		$arr[key] = 'value'
		$arr = array(key1=>value1, key2=>value2...)
		如 
			$arr = array('hello', 'world');
			$arr['name'] = 'unknown';
			$arr = array('host'=>'192.168.1.20', 'port'=>22);
	-- object 对象
	
	特殊数据类型
	-- resource 资源
	-- null 空值
	
	相关函数	
	-- unset()
		撤销一个变量
	-- (boolean)$val
		转换为布尔型，原val类型不变，类似的 (TYPE)$val
	-- settype(var, type): 
		将var转换成 type 类型
	-- is_bool()、is_string()、is_float()、is_double()、is_integer()、is_int()、
		is_null()、is_array()、is_object()、is_numeric()
	
	4、php常量
	define(name, value, true):
		定义一个名为name、值为value的常量，true表示忽略大小写
	constant(name):
		获取一个常量值，等效与 $name
	
	5、php变量
	变量引用，相当与给变量起别名
		如 $str = "spcn";,引用str $rstr = & $str;
	
	变量作用域:
	-- 局部变量，在函数内定义
	-- 全局变量，在函数外定义，函数内不能直接使用，需加 global声明
	-- 静态变量，static声明
	
	可变变量：名字可变的变量
		php中，变量的名字实际上时一个字符串 使用 “$ + 字符串” 可以获取一个变量值
		如 $str = 'hello'; $p = 'str'; $$p 相当于 $str,
		
	预定义变量:
	-- $_SERVER 数组，包含主机ip、port等信息
		如 $_SERVER['SERVER_ADDR'],$_SERVER[SERVER_NAME] ...
	-- $_COOKIE 通过HTTPCookie传递到脚本的信息
	-- $_SESSION 会话相关
	-- $_POST、$_GET 包含通过post或get方法传递参数的相关信息
	-- $GLOBALS 所有全局变量构成的数组，变量名在这个数组中是一个索引
	
	6、运算符
	+-*/%^|&! && || and or xor == != === !== > < >= <= =等

	字符串链接符为点号 . 
	如 $a = "Li",$b = "Yang",则 $a.$b两个字符串链接，生成新串"LiYang"
	加号不能作为字符串连接符，两字符串相加只是将字面的数值相加
	
	&& 和 and 、|| 和 or 意义相同，但 &&、|| 同优先级，and、or同优先级，前者优先级高
	
	===恒等，判断该运算符两边操作数在数值、类型上是否都相等
	如：$val = '123', 
		$val === 123 结果   false
		$val == 123 结果    true
		$val === true 结果  true,因为非"0"的字符串都有一个布尔值true
		
	@符号屏蔽错误输出
	如 @$val = 5/0,系统不报错
	
	7、函数
	function funname($str1, str2...) {
		funbody
	}
	
	函数传值时，声明为 function funname($str1)
	函数传引用时，声明为 function funname(&$str1)
	函数默认参数只能在参数表右侧的一个或连续多个参数
	函数使用 return 或 return() 返回，在主流程中用 return 会结束整个脚本
	变量函数：用一个字符串存储函数名
	如 $myfun = 'funname'; $myfun() 会调用funname() 函数
	

二、PHP流程控制
	1、分支
	if()、elseif()、else
	switch-case
	
	2、循环
	for(;;)、while()、do{}while()、
	foreach ($arr as $value)
		遍历数组 arr ，将遍历到的数组元素赋给 value
	foreach ($arr as $key=>$value)
		遍历数组 arr ，将遍历到的键和值分别赋给key、value
		
	3、break continue
	break 跳出一层循环
	break n 跳出n层循环
	continue 终止本次循环，开始下次循环
	
	4、流程控制另一种书写格式	
	冒号代替左括号；end... 作为结束标记
	if():...
	elseif():...
	...
	else:...
	endif;
	
	for(;;):...
	endfor;
	
	while():...
	endwhile;
	
	switch():
	case ...:...
	default:...
	endswitch;
	
	foreach():
	endforeach;
	
三、字符串处理
	1、string trim(string $str [, string charlist]) 从str中取出空格、空白或charlist指定的字符
		返回处理过的串，原串不变；
	ltrim()、rtrim() 取出字符串左/右边的空白、空格或charlist指定字符；
	
	2、string addslashes(string $str) 向str中添加转义符(反斜线)
		返回处理过的串，原串不变；
	   string stripslashes(string $str) 从str中删除转义符
	   	返回处理过的串，原串不变；
	
	   string addcslashes(string $str, string $charlist) 向str中charlist制定的字符添加转义符
	   	返回处理过的串，原串不变；
	   string stripcslashes()；
	   
	3、strlen($str) 测量str的长度，汉字占两个字节；
	
	4、substr(string $str, int start [, int length])
		截取字符串，从start开始，截取长度length；
		start<0 表示从倒数第n个开始；
		length<0表示截取到倒数第n个；
	
	5、字符串比较
	-- strcmp() 按字节比较；
	-- strcasecmp() 按字节比较，不区分大小写；
	-- strnatcmp() 按字面值比较，有数字则比较数字的大小；
	-- strncmp() 比较字符串钱几个字节；
	
	6、字符串查找
	-- strstr(string $str, string $needle)
		从str中找needle，从前往后找，找到返回字串，找不到返回false；
		如: strstr("help.txt", ".") 返回 ".txt"；
		strstr() 是 strchr() 的别名	；
	-- strrchr() 从后往前找；
	-- stristr() 不区分大小写；
	
	7、substr_count(string $str, string $needle) 统计str中needle出现的次数；
	
	8、字符串替换
	-- str_replace(string search, string replace, string src_str [, int &count])
		将src_str中出现的search全部替换成replace，用count获取替换的个数；
	-- str_ireplace() 不区分大小写
	-- substr_replace(string src_str, string replace, int start [, length])
		将src_str中从start位置起，往后的length个字节全部替换未replace，length=0相当于插入；
	
	9、字符串分隔、合成
	-- explode(string sep, string str [, int limit])
		将str以sep为分隔符切割，结果放在数组中返回，若str中没有找到分隔符sep，则数组只含一个元素str；
		limit设定生成数组的最大长度，若片段多余limit，则先切割limit-1次，剩余串放在数组末尾；
	-- implode(string sep, array pieces)
		合成字符串，将数组pieces元素以sep为链接符生成字符串返回；
	
四、正则表达式
	PHP使用PCRE风格的正则表达式，表达式放在定界符 / 中间
	^ 匹配行开始
	$ 匹配行结尾
	单词定界： \b 表示单词边界，\B表示非单词边界
		如 \btm\b表示一个单词 tm，\Btm\B表示tm是单词的一部分("html"中的tm)
	? 匹配0或1此(至多1次)
	+ 匹配1或多次(至少1次)
	* 匹配0或多次(任意次)
	{n} 匹配n此
	{n,} 至少匹配n次
	{n,m} 匹配n～m次
	\d 数字 \D 非数字
	\s 空白 \S 非空白
	\w 标识符字符 [a-zA-Z0-9_] \W 非标识符字符
	\b 单词边界 \B 非单词边界
	
	反向引用：引用前边括号内记忆的内容
		(hello)\s+(ketty)\1\2
		后边的\1 引用第一个括号hello，\2 引用第二个括号ketty
		自定义分组名 (?p<name>...)
		引用分组名 (?p=name)
		 (?p<a1>hello)\s+(?p<a2>ketty)(?p=a1)(?p=a2)
	
	模式修饰符：
	/.../i :不区分大小写
	/.../m :多文本
	/.../s :单文本
	/.../x :忽略空白
		 
	posix扩展正则表达式
	-- ereg(string pattern, string string [, array regs])
		从string中匹配表达式pattern，结果放在regs内，匹配成功返回true
		eregi()不区分大小写
	-- ereg_replace(pattern, replace, str)
		从str中匹配pattern，将匹配到的内容用replace替换生成新串返回，原串不变
		eregi_replace()不区分大小写
	-- split(pattern, string [, limit])
		将string按pattern切割，切割片段存放在数组内返回，原串不变
		spliti()不区分大小写
		
	PCRE扩展正则表达式
	-- array preg_grep(pattern, array input)
		依次对数组input中每个元素进行正则匹配，返回匹配成功的数组
	-- preg_match(pattern, subject, [, array]) 匹配1次就停止
		preg_match_all() 全部匹配
		从串subject中匹配pattern，结果存放在array中
	-- preg_quote(str [, string delimiter])
		将str中出现的正则原子副转义(加反斜线)，delimiter指定额外的需转义的字符
	-- preg_replace(pattern, replace, subject [, limit])
		从subject中匹配pattern，并用replace替换，limit指定匹配次数
	-- preg_replace_callback(pattern, callback, subject)
		从subject中匹配pattern，将记忆串生成数组传给callback()来反向引用
		callback($arr) $arr[1]、$arr[2]引用pattern小括号记忆的内容
	-- preg_split(pattern, subject [, limit])
		将subject按pattern切割
		
五、数组
	1、数组输出: print_r()
	
	2、数组遍历: 
	-- foreach()
	-- each() + list()
		each($arr1): 获取数组arr1当前游标所指的元素信息，返回含有4个元素的数组arr2
			其中$arr2[0]和$arr2['key']记录$arr1当前游标所在位置的键名
				$arr2[1]和$arr2['value']记录$arr1当前游标所在位置的值
		list($a, $b, $c ...) = $arr: 用$arr 为一组数据($a,$b,$c...)赋值
			其中$a=$arr[0],$b=$arr[1],$c=$arr[2]
	
	3、explode()将字符串切割，存放在数组里返回
		implode()将数组组合成字符串返回
		
	4、count(	array [, mode]) 统计array数组元素个数
		mode为0或1，为1时递归地统计元素个数(键个数)
		
	5、arraysearch(needle, arr [, bool strict])
		从arr中搜索needle值，返回needle所在的键，strict为true时检查给定值的类型
		
	6、array_pop(arr) 弹出arr数组的最后一个元素并返回，数组为空返回null
		array_push(arr, var) 将var压入数组arr的最后
		
	7、array_unique(arr)
		去除arr中重复的元素
		

	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
