
PHP代码都是包含在 PHP标记中，如
<?php
	...
?>

一、PHP基础
	1、php标记风格
	xml风格
	<?php
		echo "hello"
	?>
	
	脚本风格
	<script language="php">
		echo 'script'
	</script>
	
	简短风格
	<? echo 'short' ?>

	ASP风格
	<%
		echo 'ASP'
	%>
	
	简短风格、ASP风格需要在php.ini中设置相关字段为on
	
	2、php注释
	c、c++、shell三种注释风格
	/**/、//、#
	
	3、php数据类型
	标量数据类型
	-- boolean 布尔类型
		true、false
	-- string 字符串
		单引号包含的变量按普通字符处理
		双引号包含的变量会被替换成实际数值
		<<<std 符号定义 std 未字符串定界符，遇到顶格写的、孤立的 std 认为字符串结束
	-- integer 整型
	-- float 浮点型
		浮点类型 float和double完全一样
		
	复合数据类型
	-- array 数组
		三种定义方式: $arr = array(...)
		$arr = array('value1', 'value2'...)
		$arr[key] = 'value'
		$arr = array(key1=>value1, key2=>value2...)
		如 
			$arr = array('hello', 'world');
			$arr['name'] = 'unknown';
			$arr = array('host'=>'192.168.1.20', 'port'=>22);
	-- object 对象
	
	特殊数据类型
	-- resource 资源
	-- null 空值
	
	相关函数	
	-- unset()
		撤销一个变量
	-- (boolean)$val
		转换为布尔型，原val类型不变，类似的 (TYPE)$val
	-- settype(var, type): 
		将var转换成 type 类型
	-- is_bool()、is_string()、is_float()、is_double()、is_integer()、is_int()、
		is_null()、is_array()、is_object()、is_numeric()
	
	4、php常量
	define(name, value, true):
		定义一个名为name、值为value的常量，true表示忽略大小写
	constant(name):
		获取一个常量值，等效与 $name
	
	5、php变量
	变量引用，相当与给变量起别名
		如 $str = "spcn";,引用str $rstr = & $str;
	
	变量作用域:
	-- 局部变量，在函数内定义
	-- 全局变量，在函数外定义，函数内不能直接使用，需加 global声明
	-- 静态变量，static声明
	
	可变变量：名字可变的变量
		php中，变量的名字实际上时一个字符串 使用 “$ + 字符串” 可以获取一个变量值
		如 $str = 'hello'; $p = 'str'; $$p 相当于 $str,
		
	预定义变量:
	-- $_SERVER 数组，包含主机ip、port等信息
		如 $_SERVER['SERVER_ADDR'],$_SERVER[SERVER_NAME] ...
	-- $_COOKIE 通过HTTPCookie传递到脚本的信息
	-- $_SESSION 会话相关
	-- $_POST、$_GET 包含通过post或get方法传递参数的相关信息
	-- $GLOBALS 所有全局变量构成的数组，变量名在这个数组中是一个索引
	
	6、运算符
	+-*/%^|&! && || and or xor == != === !== > < >= <= =等

	字符串链接符为点号 . 
	如 $a = "Li",$b = "Yang",则 $a.$b两个字符串链接，生成新串"LiYang"
	加号不能作为字符串连接符，两字符串相加只是将字面的数值相加
	
	&& 和 and 、|| 和 or 意义相同，但 &&、|| 同优先级，and、or同优先级，前者优先级高
	
	===恒等，判断该运算符两边操作数在数值、类型上是否都相等
	如：$val = '123', 
		$val === 123 结果   false
		$val == 123 结果    true
		$val === true 结果  true,因为非"0"的字符串都有一个布尔值true
		
	@符号屏蔽错误输出
	如 @$val = 5/0,系统不报错
	
	7、函数
	function funname($str1, str2...) {
		funbody
	}
	
	函数传值时，声明为 function funname($str1)
	函数传引用时，声明为 function funname(&$str1)
	函数默认参数只能在参数表右侧的一个或连续多个参数
	函数使用 return 或 return() 返回，在主流程中用 return 会结束整个脚本
	变量函数：用一个字符串存储函数名
	如 $myfun = 'funname'; $myfun() 会调用funname() 函数
	

二、PHP流程控制
	1、分支
	if()、elseif()、else
	switch-case
	
	2、循环
	for(;;)、while()、do{}while()、
	foreach ($arr as $value)
		遍历数组 arr ，将遍历到的数组元素赋给 value
	foreach ($arr as $key=>$value)
		遍历数组 arr ，将遍历到的键和值分别赋给key、value
		
	3、break continue
	break 跳出一层循环
	break n 跳出n层循环
	continue 终止本次循环，开始下次循环
	
	4、流程控制另一种书写格式	
	冒号代替左括号；end... 作为结束标记
	if():...
	elseif():...
	...
	else:...
	endif;
	
	for(;;):...
	endfor;
	
	while():...
	endwhile;
	
	switch():
	case ...:...
	default:...
	endswitch;
	
	foreach():
	endforeach;
	
三、字符串处理
	1、string trim(string $str [, string charlist]) 从str中取出空格、空白或charlist指定的字符
		返回处理过的串，原串不变；
	ltrim()、rtrim() 取出字符串左/右边的空白、空格或charlist指定字符；
	
	2、string addslashes(string $str) 向str中添加转义符(反斜线)
		返回处理过的串，原串不变；
	   string stripslashes(string $str) 从str中删除转义符
	   	返回处理过的串，原串不变；
	
	   string addcslashes(string $str, string $charlist) 向str中charlist制定的字符添加转义符
	   	返回处理过的串，原串不变；
	   string stripcslashes()；
	   
	3、strlen($str) 测量str的长度，汉字占两个字节；
	
	4、substr(string $str, int start [, int length])
		截取字符串，从start开始，截取长度length；
		start<0 表示从倒数第n个开始；
		length<0表示截取到倒数第n个；
	
	5、字符串比较
	-- strcmp() 按字节比较；
	-- strcasecmp() 按字节比较，不区分大小写；
	-- strnatcmp() 按字面值比较，有数字则比较数字的大小；
	-- strncmp() 比较字符串钱几个字节；
	
	6、字符串查找
	-- strstr(string $str, string $needle)
		从str中找needle，从前往后找，找到返回字串，找不到返回false；
		如: strstr("help.txt", ".") 返回 ".txt"；
		strstr() 是 strchr() 的别名	；
	-- strrchr() 从后往前找；
	-- stristr() 不区分大小写；
	
	7、substr_count(string $str, string $needle) 统计str中needle出现的次数；
	
	8、字符串替换
	-- str_replace(string search, string replace, string src_str [, int &count])
		将src_str中出现的search全部替换成replace，用count获取替换的个数；
	-- str_ireplace() 不区分大小写
	-- substr_replace(string src_str, string replace, int start [, length])
		将src_str中从start位置起，往后的length个字节全部替换未replace，length=0相当于插入；
	
	9、字符串分隔、合成
	-- explode(string sep, string str [, int limit])
		将str以sep为分隔符切割，结果放在数组中返回，若str中没有找到分隔符sep，则数组只含一个元素str；
		limit设定生成数组的最大长度，若片段多余limit，则先切割limit-1次，剩余串放在数组末尾；
	-- implode(string sep, array pieces)
		合成字符串，将数组pieces元素以sep为链接符生成字符串返回；
	
四、正则表达式
	PHP使用PCRE风格的正则表达式，表达式放在定界符 / 中间
	^ 匹配行开始
	$ 匹配行结尾
	单词定界： \b 表示单词边界，\B表示非单词边界
		如 \btm\b表示一个单词 tm，\Btm\B表示tm是单词的一部分("html"中的tm)
	? 匹配0或1此(至多1次)
	+ 匹配1或多次(至少1次)
	* 匹配0或多次(任意次)
	{n} 匹配n此
	{n,} 至少匹配n次
	{n,m} 匹配n～m次
	\d 数字 \D 非数字
	\s 空白 \S 非空白
	\w 标识符字符 [a-zA-Z0-9_] \W 非标识符字符
	\b 单词边界 \B 非单词边界
	
	反向引用：引用前边括号内记忆的内容
		(hello)\s+(ketty)\1\2
		后边的\1 引用第一个括号hello，\2 引用第二个括号ketty
		自定义分组名 (?p<name>...)
		引用分组名 (?p=name)
		 (?p<a1>hello)\s+(?p<a2>ketty)(?p=a1)(?p=a2)
	
	模式修饰符：
	/.../i :不区分大小写
	/.../m :多文本
	/.../s :单文本
	/.../x :忽略空白
		 
	posix扩展正则表达式
	-- ereg(string pattern, string string [, array regs])
		从string中匹配表达式pattern，结果放在regs内，匹配成功返回true
		eregi()不区分大小写
	-- ereg_replace(pattern, replace, str)
		从str中匹配pattern，将匹配到的内容用replace替换生成新串返回，原串不变
		eregi_replace()不区分大小写
	-- split(pattern, string [, limit])
		将string按pattern切割，切割片段存放在数组内返回，原串不变
		spliti()不区分大小写
		
	PCRE扩展正则表达式
	-- array preg_grep(pattern, array input)
		依次对数组input中每个元素进行正则匹配，返回匹配成功的数组
	-- preg_match(pattern, subject, [, array]) 匹配1次就停止
		preg_match_all() 全部匹配
		从串subject中匹配pattern，结果存放在array中
	-- preg_quote(str [, string delimiter])
		将str中出现的正则原子副转义(加反斜线)，delimiter指定额外的需转义的字符
	-- preg_replace(pattern, replace, subject [, limit])
		从subject中匹配pattern，并用replace替换，limit指定匹配次数
	-- preg_replace_callback(pattern, callback, subject)
		从subject中匹配pattern，将记忆串生成数组传给callback()来反向引用
		callback($arr) $arr[1]、$arr[2]引用pattern小括号记忆的内容
	-- preg_split(pattern, subject [, limit])
		将subject按pattern切割
		
五、数组
	1、数组输出: print_r()
	
	2、数组遍历: 
	-- foreach()
	-- each() + list()
		each($arr1): 获取数组arr1当前游标所指的元素信息，返回含有4个元素的数组arr2
			其中$arr2[0]和$arr2['key']记录$arr1当前游标所在位置的键名
				$arr2[1]和$arr2['value']记录$arr1当前游标所在位置的值
		list($a, $b, $c ...) = $arr: 用$arr 为一组数据($a,$b,$c...)赋值
			其中$a=$arr[0],$b=$arr[1],$c=$arr[2]
	
	3、explode()将字符串切割，存放在数组里返回
		implode()将数组组合成字符串返回
		
	4、count(	array [, mode]) 统计array数组元素个数
		mode为0或1，为1时递归地统计元素个数(键个数)
		
	5、arraysearch(needle, arr [, bool strict])
		从arr中搜索needle值，返回needle所在的键，strict为true时检查给定值的类型
		
	6、array_pop(arr) 弹出arr数组的最后一个元素并返回，数组为空返回null
		array_push(arr, var) 将var压入数组arr的最后
		
	7、array_unique(arr)
		去除arr中重复的元素
		
六、表单
	表单使用<form>标记，表单结构如下
	<form name="form_name" method="method" action="url" enctype="value" target="target_win">
	...
	</form>

	form标记的属性：
		name:表单名称
		method:表单提交方式，GET或POST
		action:处理该页面的的url，可以是一个.php文件
		enctype:设置表单编码方式
		target:返回信息的显示方式
	
	在使用form表单时，必须指定action，它指定表单在提交时将内容发往何处进行处理

	表单元素：
	1、输入标记 <input>
	语法格式如下
	<form>
		<input name="file_name" type="type_name">
	</form>
	type:
	-- text 文本框
	-- password 密码域，文本框输入时显示为*
	-- file 文件域，上传文件时需要指明表单属性 enctype="multipart/form-data"
	-- image 图像域，用在提交按钮上，这个图片具有按钮功能
	-- radio 单选按钮，用于设置一组选项，用户只能选择一项
	-- checkbox 复选框
	-- submit 提交按钮，提交整个表单
	-- reset 清除与重置表单内容
	-- button 按钮，可以激发提交表单的动作
	-- hidden 隐藏域，用于在表单中以隐含方式提交变量值
	
	2、选择域标记 <select>和<option>
	<select name="name" size="value" multiple>
		<option value="value" selected>选项1</option>
		<option value="value">选项2</option>
		<option value="value">选项3</option>
	</select>
	
	multiple表示以菜单方式显示数据，默认以列表(下拉菜单)显示数据
	菜单方式显示的数据支持多选
	
	3、文字域标记 <textarea>	
	<textarea name="name" rows=value cols=value value="value" warp="value">
		...
	</textarea>
	
	
	php中参数传递的常用方法有3种：$_POST[]、$_GET[]、$_SESSION[]，通过提交的 name 来获取值
	
	对URL传递的参数进行编码 string urlencode(string str)
	如,对id参数进行编码
	<a href="index.php?id=<?php echo urlencode("示例"); ?>">例子</a>
	
	对URL传递的参数进行解码 string urldecode(string str)
	当通过GET方法传递过来参数后，使用 urldecode($_GET[id]) 返回解码的字符
	
七、COOKIE 管理
	1、创建Cookie
	setcookie(name, value, expire, path, domain, secure);
	2、获得Cookie的值
	$_COOKIE[coookie_name]
	3、删除Cookie
	使用setcookie设置cookie有效时间减1
	setcookie(cookie_name, "", time()-1);
	
	4、session使用流程
	启动会话 -> 注册会话 -> 使用会话 -> 删除会话
	-- 启动会话 bool session_start(void)
		启动会话之前浏览器不能有任何输出
	-- 注册会话 通过数组 $_SESSION 创建一个会话变量
		$_SESSION[sess_name] = value;
	-- 使用会话 访问数组$_SESSION[sess_name]
		先判断sessname键是否存在
			empty($_SESSION[sess_name])
	-- 删除会话 unset($_SESSION[sess_name])
		删除多个会话，可以将空数组赋给$_SESSION
			$_SESSION = array();
		结束当前会话
			session_destroy();
	
八、文件处理
	*文件操作
	resource fopen(filename, mode [, une_include_path]);
		打开文件，返回文件操作句柄
		mode:r,w,+,b,a,x       x为新建写打开，文件爱呢若存在则打开失败返回false
		use_include_path:使用php.ini中指定的路径
		
	fclose(handle) 关闭文件，handle巍峨哦fopen时返回的文件句柄
	
	readfile(name) 读取文件爱呢内容，并输出到缓冲区(直接显示)
		文件不需要打开，指定文件名name即可，直接输出文件内容
		
	array file(name) 读取文件内容，并按行输出到数组内返回
		文件不需打开
		
	string file_get_contents(name [, offset, maxlen])
		读取文件内容，存放在数组中返回，offset指定读取起始偏移，maxlen指定读取长度
		
	string fgets(handle [, length])
		读取文件一行返回到数组中，handle为已打开的文件句柄
		
	string fgetss(handle [, length,allowable_tags])
		读取一行数据，过滤任何html和php标记，allowable_tags指定过滤器忽略的标记
	
	string fgetc(handle)
		读一个字符
		
	string fread(handle, length)
		读指定字节
		
	int fwrite(handle, string [, length])
		写入指定字节，和fputs()用法相同，
		
	int file_put_contents(filename, data [, flags])
		想文件中写入数据data，flags为文件锁标记
		
	bool copy(path1, path2)
		将文件从path1拷贝到path2，失败返回false
		
	bool rename(filename1, filename2)
		把filename改名为filename2
		
	bool unlink(filename)
		删除文件，成功返回true
		
	int fileatime(filename)
		返回文件最后一次访问时间，以UNIX时间戳方式返回
		
	int filetime(filename)
		返回文件最后一次修改时间
		
	int filesize(filename)
		返回文件大小(byte)
	
	int pathinfo(name [, opt])
		文件路径信息，opt设置返回信息
		opt:
		-- PATHINFO_DIRNAME		dirname	
		-- PATHINFO_BASENAME		basename
		-- PATHINFO_EXTENSION	extension
		
	string realpath(filename)
		返回文件绝对路径
		
	array stat(filename)
		文件相关信息
		
	fopen('http://127.0.0.1/tm/sl/index.php', 'rb')
		支持以url方式访问远程文件
			
	rewind(handle)
		重置文件指针到开头
	
	fseek((handle, offset, wherce)
		定位文件指针
		
	bool feof(handle)
		判断文件指针是否到文件结尾
		
	int ftell(handle)
		返回当前文件指针位置
		
	bool flock(handle, opt) 为文件加锁
		opt：
		-- LOCK_SH 共享锁(读)
		-- LOCK_EX 独占锁(写)
		-- LOCK_UN 释放锁定
		-- LOCK_NB 设置文件锁非阻塞		
	
	*目录操作
	resource opendir(path) 打开目录，返回句柄
		目录不存在或无权限时返回false
	
	closedir(handle) 关闭目录
	
	is_dir(path) 判断path是否是目录
	
	array scandir(path [, sorting_order])
		返回目录path下的文件和目录名，sorting_order指定排序，默认按首字母升序
		
	bool mkdir(path) 创建目录
	
	bool rmdir(path) 删除空目录
	
	string getcwd() 获取当前工作路径
	
	bool chdir(path) 切换到path目录
	
	float disk_free_space(path) 返回目录可用空间
	
	float disk_total_space(path) 返回目录总大小
	
	string readdir(handle) 返回下一个文件名，目录指针后移
	
	rewinddir(handle) 重置目录指针
	
	*文件上传
	1、php.ini设置
	-- file_uploads: on
	-- upload_tmp_dir:文件上传过程咱存的目录
	-- upload_max_filesize: 上传文件最大尺寸，默认为2M
	...
	
	2、$_FILES 二位数组数组
	在设置表单时，input域指定 name="u_file"
	$_FILES["u_file"][...]存放了要上传的文件信息
	-- name:文件名
	-- size:大小(字节)
	-- tmp_name:咱存在目录中的临时文件名
	-- type:文件类型、
	-- error:长传结果，为0表示上传成功
	
	3、move_uploaded_file(filename, dst_name)
	文件上传函数，filename为临时文件名，dst_name为上传后文件的名字
	-- 一般来说，令$filename = $_FILES["u_file"][tmp_name]
				$dst_name = $_FILES["u_file"][name]
	-- 多文件上传时，生命input的name="u_file[]" 为一个数组，这样，$_FILES["u_file"][name]保存了上传文件名的数组，$_FILES["u_file"][tmp_name]保存了临时文件名的数组，循环调用上传函数可以实现多文件的上传.


九、面向对象
	1、php定义一个类的格式为
	class SportClass {...}
	-- class是类定义的关键字，SportClass 是类名
	-- 一个类只能在一个php代码片段中声明完成，即<?php ?>标记之间，不可分割成多块。	
	
	2、类成员	
	类的成员变量声明方式为 【关键字 变量名】

	类的成员函数(方法)声明方式为 【关键字 function 方法名】
		其中关键字有 public private protected static final
		-- public 在声明时若没有制定关键字，则默认是public，任何人都可一方问该变量或方法
		-- private 只能该类内部的变量或方法可以使用
		-- protected 只能该类或它的子类内部方法可使用
		-- static 静态成员不需要实例，使用类名就可以访问；
			静态方法只能使用静态变量不能调用普通变量，普通方法可以调用静态变量；
			静态成员调用格式为 【关键字::静态成员】,关键字可以是self或类名
			静态成员在定义类的时候就一分配存储空间，销毁对象后仍存在。

	类常量声明使用const关键字 【const PI=3.14159】

	3、实例化
	类的实例化通过new关键字来实现 $ob = new SportClass();

	对象的成员调用 【对象名->成员名】

	
	4、类构造、析构
	默认情况下，php会生成一个没有参数、不做任何动作的构造函数
	类的构造函数
		public function __construct(...)

	类的析构
		public function __destruct(void)

	5、继承 多态
	子类继承父类使用 extends 关键字
		class subClass extends superClass {...}
		-- subClass是子类名，superClass是父类名

	多继承需要使用“接口类”(interface)来实现

	多态的两种形式：覆盖和重载
		覆盖是指子类重写父类中的同名函数
		重载：php是弱类型语言，重载需要借助 __call() 魔术方法

	6、this和 "::"
	$this-> 在类内部使用，表示这个对象本身

	:: 使用方法为 【关键字::变量名/常量名/方法】
		关键字为 parent、self、类名
		-- parent：可以调用父类中的成员
		-- self ：调用本类中的静态成员和方法
		-- 类名：调用指定类中的成员

	7、特殊类
	使用final定义不能被继承的类：【final class name {...}】

	使用abstract定义抽象类：【abstract class name {...}】
		抽象类是一种不能被实例化的类，只能作为其他类的父类，抽象类至少要包含一个抽象方法，也就时没有被实现的方法

	使用interface声明接口类：【interface name】：注意没有class关键字
		接口类只能包含为实现的方法和一些成员变量，使用接口类可以实现“多继承”：	
		-- 使用 implements 实现多继承，如定义两个接口类 iclass1、iclass2
		--	【class subclass implements iclass1, iclass2 {...}】

	8、类比较、运算
	php5中，使用赋值运算符仅仅是把该类引用赋给另一个变量，想获取该类的拷贝，需要使用clone关键字【$ob2 = clone $ob1】
		在类中定义 __clone()方法，可以指定在clone时的行为，如修改某个成员变量；
	
	对象比较：
	-- “==”比较的是两对象的值是否相等
	-- “===”比较的是两变量是否指向同一个对象(是否是同一个对象的引用)

	对象类型检测使用 instanceof 关键字
		objectname instanceof classname ：对象objectname是否属于classname类或子类

	9、魔术方法
	__set($name, $value):当试图写入一个不存在或不可见(private、protected)的成员变量时，调用此方法，可以为类设置一个$name成员
		if(!isset($this->$name)){$this->$name = $value;}

	__get($name):当试图访问一个不存在或不可见的成员变量时，调用此方法
		if(!isset($this->$name)){$this->$name = 0;}

	__call($method, $varlist) 当试图调用不存在或不可见的成员方法时，调用__call()
		$method是方法名，$varlist是一数组形式存放的参数表
		在__call()中，通过判断函数名和参数表，调用不同的函数，实现 伪重载。

	__sleep()和__wakeup():分别指定在对象的序列化和反序列化时所做的处理
		serialize()将对象序列化，对象中变量全部保存，生成一个串，在unserialize()时再把串反序列化还原成对象
		若定义了__sleep()，序列化前先调用 __sleep()，仅将它的返回值生成序列化的串
		若定义了__wakeup()，在还原成对象后，调用该函数做后期处理

	__toString() 当echo或print一个对象时，若为定义__toString()或产生致命错误，若定义_toString(),会打印它的返回值

	
	__autoload() 当用类实例化一个对象时，若该类不带当前php文件中，则需要include_once()导入这个类声明文件，若定义了__autoload()，则在实例化时调用它，函数内部可以实现对这个类文件的include_once.

十、php操作mysql
	php操作数据库的步骤
		连接mysql数据库 -> 选择数据库 -> 执行sql语句 -> 关闭结果集 -> 关闭mysql
	1、连接数据库
	resource mysql_connect(host,username,password)
		host是mysql所在主机
		连接成功返回一个连接资源，失败返回false，用mysql_error()获取错误信息

	2、选择数据库
	resource mysql_select_db(dataname [, resource link])
		link是mysql_connect()的返回值，若未制定，则尝试打开一个数据库并使用

	3、执行sql语句
	resource mysql_query(string SQL, link)
		SQL是SQL语句，link是mysql_connect()的返回值
	SQL的执行结果存放在资源resource中，可以使用一下3个函数的任意一个来获取结果：
	-- array mysql_fetch_array(resource result [, result_type])
		result是mysql_query()的返回值，该函数从执行结果中取出一行数据放入数组中，分别用数字、列名作为键，再次调用返回下一行；
	-- object mysql_fetch_object(resource result)
		函数从结果中取出一行数据，生成一个对象，对象成员是查询语句中的列名；
	-- array mysql_fetch_row(resource result)
		函数从结果中取出一行数据，放在数组中，数组使用数字作为键。
	int mysql_num_rows(resource result)
		返回结果的条目数

十一、XML概述
	1、XML文档的基本要素，XML声明、处理指令(PI)、注释和元素
		XML声明
		XML声明在文档中只能出现一次，而且必须是在第一行
		<?xml version="1.0" encoding="gb2312" standalone="yes" ?>
		-- version="1.0" XML的版本。是声明汇总必不可少的属性，而且必须放到第一位
		-- encoding="gb2312" 编码声明。如果不声明，XML默认使用UTF-8来解析文档。
		-- standalone="yes" 独立声明。如果该属性赋值yes，那么说明该XML不依赖于外部文档

		处理指令
		指定如何处理XML文档的指令 <?处理指令名 处理执行信息 ?>,如
		<?xml-stylesheet type="text/css" href="Book.css"?>
		-- xml-stylesheet: 样式表单处理指令
		-- type="text/css": 设定了文档所使用的样式是css
		-- href="Book.css": 设定了样式文件的地址

		注释
		<!-- ...... -->
		-- 不能出现在XML声明之前
		-- 不能出现在XML元素中间，如 <book <!-- 这是错误的 --> >
		-- 不能出现在属性列表中
		-- 不能花钱套注释
		-- 注释内容可以包含 < > 和 &，但不允许有 "--" 字符

		XML元素
		<标签>数据内容</标签>
		-- 标签必须成对出现，对于空余啊素，可以使用简短形式<标签/>
		-- 英文标签只能用下划线或英文字母开头，中文标签只能用下划线或中文字符开头。名称中只能有 "_-.:"等特殊字符
		-- 标签中不能有空格
		-- 标签对大小写敏感

		XML属性
		XML属性时XML元素中的内容
		<标签 属性名1="属性值1" 属性名2="属性值2" ...>内容</标签>
		-- 属性名和属性值必须出现，不孕需属性名单独出现，如果有空的属性，使用 属性名="" 表示
		-- 属性值必须用引号括起来

		CDATA标记
		XML中的 > 、<、& 等需要用实体引用来处理
			字符				实体引用
			<				&lt;
			>				&gt;
			'				&apos;
			"				&quot;
			&				&amp;

		如果是在CDATA标记段内，这些字符不许要使用实体引用，CDATA标记格式如下
		<![CDATA[
		...
		]]>

		命名空间
		命名空间通过元素前面增减一个前缀来保证元素和属性的唯一性
		<标签名称 xmlns:前缀名称="URL">
		设置好前缀名后，在写标签名时使用『前缀名:标签名』的形式

	2、在PHP中创建XML文档
	a、使用echo直接输出XML标签

	b、SimpleXML
		创建SimpleXML对象
		-- simplexml_load_file("XML_filename");
			返回SimpleXMLElement对象
		-- simplerxml_load_string(string);
			string是XML格式的字符串，返回SimpleXMLElement对象
		-- simplexml_import_dom(domDocument dom)
			dom时domDocument的一个实例，dom首先加载XML格式的字符串,dom->loadXML($str),返回SimpleXMLElement对象

		遍历SimpleXMLElement对象所有元素
		对于SimpleXMLElement对象，使用类方法child()获取其子节点

		遍历所有属性SimpleXMLElement对象所有属性
		对于SimpleXMLElement对象，使用类方法attributes()获取其属性
	
		访问特定节点及属性
		每个标签下的子标签在php中表现为SimpleXMLElement对象的属性，若有多个同名标签，用数组表示，标签的属性也使用数组，直接用属性名访问
		$xml->book[0]->computerbook[0]
		$xml->book[1]->computerbook
		$xml->book[1]->computerbook['name']

		修改XML数据
		直接访问改数据，使用 = 赋值
		
		保存XML文档
		$modi = $xml->asXML();
		-- $xml 是SimpleXMLElement对象，类方法asXML() 将$xml格式化为字符串，返回给$modi,然后将串写入文件即可保存。

	c、动态创建XML文档 DOM
		$dom = new DOMDocument(version,encoding);
		-- 创建DOM对象
		$object = $dom->createElement('object')
		-- 创建名为 object 的标签
		$dom->appendChild($object)
		-- 将标签 $object 加入到dom下
		-- 若又有标签$book,需要在object下，需要调用$object的方法appendChild($book)
		$type = $dom->createAttribute('type')
		-- 创建一个名为type的属性
		-- 若将属性加入某个标签，使用这个标签对象的 appendChild() 方法
		$type_value = $dom->createTextNode('computer')
		-- 创建一个文本类型的值，这个值可以作为属性值、标签内容等等
		-- 若将这个值加入某属性或标签，使用该对象的 appendChild() 方法	









	
	
	
	
	
	
	
